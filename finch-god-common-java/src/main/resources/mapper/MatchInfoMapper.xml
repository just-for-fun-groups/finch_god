<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finch.god.common.dao.MatchInfoMapper">
  <resultMap id="BaseResultMap" type="com.finch.god.common.entity.MatchInfo">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="match_date" jdbcType="VARCHAR" property="matchDate" />
    <result column="creator_uid" jdbcType="INTEGER" property="creatorUid" />
    <result column="creator" jdbcType="VARCHAR" property="creator" />
    <result column="create_time" jdbcType="INTEGER" property="createTime" />
    <result column="updater_uid" jdbcType="INTEGER" property="updaterUid" />
    <result column="updater" jdbcType="VARCHAR" property="updater" />
    <result column="update_time" jdbcType="INTEGER" property="updateTime" />
    <result column="players" jdbcType="VARCHAR" property="players"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, address, match_date, creator_uid, creator, create_time, updater_uid, updater, 
    update_time,players
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from match_info
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from match_info
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insertSelective" parameterType="com.finch.god.common.entity.MatchInfo">
    insert into match_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="address != null">
        address,
      </if>
      <if test="matchDate != null">
        match_date,
      </if>
      <if test="creatorUid != null">
        creator_uid,
      </if>
      <if test="creator != null">
        creator,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updaterUid != null">
        updater_uid,
      </if>
      <if test="updater != null">
        updater,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="matchDate != null">
        #{matchDate,jdbcType=VARCHAR},
      </if>
      <if test="creatorUid != null">
        #{creatorUid,jdbcType=INTEGER},
      </if>
      <if test="creator != null">
        #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=INTEGER},
      </if>
      <if test="updaterUid != null">
        #{updaterUid,jdbcType=INTEGER},
      </if>
      <if test="updater != null">
        #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.finch.god.common.entity.MatchInfo">
    update match_info
    <set>
      <if test="address != null">
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="matchDate != null">
        match_date = #{matchDate,jdbcType=VARCHAR},
      </if>
      <if test="creatorUid != null">
        creator_uid = #{creatorUid,jdbcType=INTEGER},
      </if>
      <if test="creator != null">
        creator = #{creator,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=INTEGER},
      </if>
      <if test="updaterUid != null">
        updater_uid = #{updaterUid,jdbcType=INTEGER},
      </if>
      <if test="updater != null">
        updater = #{updater,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectAll" resultMap="BaseResultMap">
    SELECT b.id,b.players,i.address,i.create_time from (
           SELECT m.id,  GROUP_CONCAT(d.player_name) players
           FROM match_info m
                  left join match_detail d on m.id = d.match_id
           GROUP BY m.id
         ) b
           left join match_info i on i.id=b.id
    order by i.id desc
  </select>
</mapper>